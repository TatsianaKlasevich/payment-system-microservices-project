/*
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DepositRequestDTO;
import org.openapitools.client.model.DepositResponseDTO;
import org.openapitools.client.model.PaymentRequestDTO;
import org.openapitools.client.model.PaymentResponseDTO;
import org.openapitools.client.model.TransactionResponseDTO;
import org.openapitools.client.model.TransferRequestDTO;
import org.openapitools.client.model.TransferResponseDTO;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TransactionControllerApi {
    private ApiClient localVarApiClient;

    public TransactionControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TransactionControllerApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for createDepositUsingPOST
     *
     * @param depositRequestDTO depositRequestDTO (required)
     * @param _callback         Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call createDepositUsingPOSTCall(DepositRequestDTO depositRequestDTO, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = depositRequestDTO;

        // create path and map variables
        String localVarPath = "/payments/v1/deposit";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{};
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createDepositUsingPOSTValidateBeforeCall(DepositRequestDTO depositRequestDTO, final ApiCallback _callback) throws ApiException {

        // verify the required parameter 'depositRequestDTO' is set
        if (depositRequestDTO == null) {
            throw new ApiException("Missing the required parameter 'depositRequestDTO' when calling createDepositUsingPOST(Async)");
        }


        okhttp3.Call localVarCall = createDepositUsingPOSTCall(depositRequestDTO, _callback);
        return localVarCall;

    }

    /**
     * Make deposit
     *
     * @param depositRequestDTO depositRequestDTO (required)
     * @return DepositResponseDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * </table>
     */
    public DepositResponseDTO createDepositUsingPOST(DepositRequestDTO depositRequestDTO) throws ApiException {
        ApiResponse<DepositResponseDTO> localVarResp = createDepositUsingPOSTWithHttpInfo(depositRequestDTO);
        return localVarResp.getData();
    }

    /**
     * Make deposit
     *
     * @param depositRequestDTO depositRequestDTO (required)
     * @return ApiResponse&lt;DepositResponseDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<DepositResponseDTO> createDepositUsingPOSTWithHttpInfo(DepositRequestDTO depositRequestDTO) throws ApiException {
        okhttp3.Call localVarCall = createDepositUsingPOSTValidateBeforeCall(depositRequestDTO, null);
        Type localVarReturnType = new TypeToken<DepositResponseDTO>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Make deposit (asynchronously)
     *
     * @param depositRequestDTO depositRequestDTO (required)
     * @param _callback         The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call createDepositUsingPOSTAsync(DepositRequestDTO depositRequestDTO, final ApiCallback<DepositResponseDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = createDepositUsingPOSTValidateBeforeCall(depositRequestDTO, _callback);
        Type localVarReturnType = new TypeToken<DepositResponseDTO>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for createPaymentUsingPOST
     *
     * @param paymentRequestDTO paymentRequestDTO (required)
     * @param _callback         Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call createPaymentUsingPOSTCall(PaymentRequestDTO paymentRequestDTO, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = paymentRequestDTO;

        // create path and map variables
        String localVarPath = "/payments/v1/payment";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{};
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPaymentUsingPOSTValidateBeforeCall(PaymentRequestDTO paymentRequestDTO, final ApiCallback _callback) throws ApiException {

        // verify the required parameter 'paymentRequestDTO' is set
        if (paymentRequestDTO == null) {
            throw new ApiException("Missing the required parameter 'paymentRequestDTO' when calling createPaymentUsingPOST(Async)");
        }


        okhttp3.Call localVarCall = createPaymentUsingPOSTCall(paymentRequestDTO, _callback);
        return localVarCall;

    }

    /**
     * Make payment
     *
     * @param paymentRequestDTO paymentRequestDTO (required)
     * @return PaymentResponseDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * </table>
     */
    public PaymentResponseDTO createPaymentUsingPOST(PaymentRequestDTO paymentRequestDTO) throws ApiException {
        ApiResponse<PaymentResponseDTO> localVarResp = createPaymentUsingPOSTWithHttpInfo(paymentRequestDTO);
        return localVarResp.getData();
    }

    /**
     * Make payment
     *
     * @param paymentRequestDTO paymentRequestDTO (required)
     * @return ApiResponse&lt;PaymentResponseDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<PaymentResponseDTO> createPaymentUsingPOSTWithHttpInfo(PaymentRequestDTO paymentRequestDTO) throws ApiException {
        okhttp3.Call localVarCall = createPaymentUsingPOSTValidateBeforeCall(paymentRequestDTO, null);
        Type localVarReturnType = new TypeToken<PaymentResponseDTO>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Make payment (asynchronously)
     *
     * @param paymentRequestDTO paymentRequestDTO (required)
     * @param _callback         The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call createPaymentUsingPOSTAsync(PaymentRequestDTO paymentRequestDTO, final ApiCallback<PaymentResponseDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPaymentUsingPOSTValidateBeforeCall(paymentRequestDTO, _callback);
        Type localVarReturnType = new TypeToken<PaymentResponseDTO>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for createTransferUsingPOST
     *
     * @param transferRequestDTO transferRequestDTO (required)
     * @param _callback          Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call createTransferUsingPOSTCall(TransferRequestDTO transferRequestDTO, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = transferRequestDTO;

        // create path and map variables
        String localVarPath = "/payments/v1/transfer";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{};
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTransferUsingPOSTValidateBeforeCall(TransferRequestDTO transferRequestDTO, final ApiCallback _callback) throws ApiException {

        // verify the required parameter 'transferRequestDTO' is set
        if (transferRequestDTO == null) {
            throw new ApiException("Missing the required parameter 'transferRequestDTO' when calling createTransferUsingPOST(Async)");
        }


        okhttp3.Call localVarCall = createTransferUsingPOSTCall(transferRequestDTO, _callback);
        return localVarCall;

    }

    /**
     * Make transfer
     *
     * @param transferRequestDTO transferRequestDTO (required)
     * @return TransferResponseDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * </table>
     */
    public TransferResponseDTO createTransferUsingPOST(TransferRequestDTO transferRequestDTO) throws ApiException {
        ApiResponse<TransferResponseDTO> localVarResp = createTransferUsingPOSTWithHttpInfo(transferRequestDTO);
        return localVarResp.getData();
    }

    /**
     * Make transfer
     *
     * @param transferRequestDTO transferRequestDTO (required)
     * @return ApiResponse&lt;TransferResponseDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<TransferResponseDTO> createTransferUsingPOSTWithHttpInfo(TransferRequestDTO transferRequestDTO) throws ApiException {
        okhttp3.Call localVarCall = createTransferUsingPOSTValidateBeforeCall(transferRequestDTO, null);
        Type localVarReturnType = new TypeToken<TransferResponseDTO>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Make transfer (asynchronously)
     *
     * @param transferRequestDTO transferRequestDTO (required)
     * @param _callback          The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call createTransferUsingPOSTAsync(TransferRequestDTO transferRequestDTO, final ApiCallback<TransferResponseDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTransferUsingPOSTValidateBeforeCall(transferRequestDTO, _callback);
        Type localVarReturnType = new TypeToken<TransferResponseDTO>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for getAllTransactionsByCardIdUsingGET
     *
     * @param cardId    cardId (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getAllTransactionsByCardIdUsingGETCall(Long cardId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/payments/v1/{cardId}"
                .replaceAll("\\{" + "cardId" + "\\}", localVarApiClient.escapeString(cardId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{};
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllTransactionsByCardIdUsingGETValidateBeforeCall(Long cardId, final ApiCallback _callback) throws ApiException {

        // verify the required parameter 'cardId' is set
        if (cardId == null) {
            throw new ApiException("Missing the required parameter 'cardId' when calling getAllTransactionsByCardIdUsingGET(Async)");
        }


        okhttp3.Call localVarCall = getAllTransactionsByCardIdUsingGETCall(cardId, _callback);
        return localVarCall;

    }

    /**
     * Get all payment transactions by some card id
     *
     * @param cardId cardId (required)
     * @return List&lt;TransactionResponseDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * </table>
     */
    public List<TransactionResponseDTO> getAllTransactionsByCardIdUsingGET(Long cardId) throws ApiException {
        ApiResponse<List<TransactionResponseDTO>> localVarResp = getAllTransactionsByCardIdUsingGETWithHttpInfo(cardId);
        return localVarResp.getData();
    }

    /**
     * Get all payment transactions by some card id
     *
     * @param cardId cardId (required)
     * @return ApiResponse&lt;List&lt;TransactionResponseDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<List<TransactionResponseDTO>> getAllTransactionsByCardIdUsingGETWithHttpInfo(Long cardId) throws ApiException {
        okhttp3.Call localVarCall = getAllTransactionsByCardIdUsingGETValidateBeforeCall(cardId, null);
        Type localVarReturnType = new TypeToken<List<TransactionResponseDTO>>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all payment transactions by some card id (asynchronously)
     *
     * @param cardId    cardId (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getAllTransactionsByCardIdUsingGETAsync(Long cardId, final ApiCallback<List<TransactionResponseDTO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllTransactionsByCardIdUsingGETValidateBeforeCall(cardId, _callback);
        Type localVarReturnType = new TypeToken<List<TransactionResponseDTO>>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for getAllTransactionsUsingGET
     *
     * @param offset       (optional)
     * @param paged        (optional)
     * @param pageNumber   (optional)
     * @param pageSize     (optional)
     * @param sortSorted   (optional)
     * @param sortUnsorted (optional)
     * @param unpaged      (optional)
     * @param _callback    Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getAllTransactionsUsingGETCall(Long offset, Boolean paged, Integer pageNumber, Integer pageSize, Boolean sortSorted, Boolean sortUnsorted, Boolean unpaged, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/payments/v1/page";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (paged != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("paged", paged));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (sortSorted != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort.sorted", sortSorted));
        }

        if (sortUnsorted != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort.unsorted", sortUnsorted));
        }

        if (unpaged != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unpaged", unpaged));
        }

        final String[] localVarAccepts = {
                "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{};
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllTransactionsUsingGETValidateBeforeCall(Long offset, Boolean paged, Integer pageNumber, Integer pageSize, Boolean sortSorted, Boolean sortUnsorted, Boolean unpaged, final ApiCallback _callback) throws ApiException {


        okhttp3.Call localVarCall = getAllTransactionsUsingGETCall(offset, paged, pageNumber, pageSize, sortSorted, sortUnsorted, unpaged, _callback);
        return localVarCall;

    }

    /**
     * Show all payments by some page and sort
     *
     * @param offset       (optional)
     * @param paged        (optional)
     * @param pageNumber   (optional)
     * @param pageSize     (optional)
     * @param sortSorted   (optional)
     * @param sortUnsorted (optional)
     * @param unpaged      (optional)
     * @return List&lt;TransactionResponseDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * </table>
     */
    public List<TransactionResponseDTO> getAllTransactionsUsingGET(Long offset, Boolean paged, Integer pageNumber, Integer pageSize, Boolean sortSorted, Boolean sortUnsorted, Boolean unpaged) throws ApiException {
        ApiResponse<List<TransactionResponseDTO>> localVarResp = getAllTransactionsUsingGETWithHttpInfo(offset, paged, pageNumber, pageSize, sortSorted, sortUnsorted, unpaged);
        return localVarResp.getData();
    }

    /**
     * Show all payments by some page and sort
     *
     * @param offset       (optional)
     * @param paged        (optional)
     * @param pageNumber   (optional)
     * @param pageSize     (optional)
     * @param sortSorted   (optional)
     * @param sortUnsorted (optional)
     * @param unpaged      (optional)
     * @return ApiResponse&lt;List&lt;TransactionResponseDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<List<TransactionResponseDTO>> getAllTransactionsUsingGETWithHttpInfo(Long offset, Boolean paged, Integer pageNumber, Integer pageSize, Boolean sortSorted, Boolean sortUnsorted, Boolean unpaged) throws ApiException {
        okhttp3.Call localVarCall = getAllTransactionsUsingGETValidateBeforeCall(offset, paged, pageNumber, pageSize, sortSorted, sortUnsorted, unpaged, null);
        Type localVarReturnType = new TypeToken<List<TransactionResponseDTO>>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Show all payments by some page and sort (asynchronously)
     *
     * @param offset       (optional)
     * @param paged        (optional)
     * @param pageNumber   (optional)
     * @param pageSize     (optional)
     * @param sortSorted   (optional)
     * @param sortUnsorted (optional)
     * @param unpaged      (optional)
     * @param _callback    The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getAllTransactionsUsingGETAsync(Long offset, Boolean paged, Integer pageNumber, Integer pageSize, Boolean sortSorted, Boolean sortUnsorted, Boolean unpaged, final ApiCallback<List<TransactionResponseDTO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllTransactionsUsingGETValidateBeforeCall(offset, paged, pageNumber, pageSize, sortSorted, sortUnsorted, unpaged, _callback);
        Type localVarReturnType = new TypeToken<List<TransactionResponseDTO>>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
