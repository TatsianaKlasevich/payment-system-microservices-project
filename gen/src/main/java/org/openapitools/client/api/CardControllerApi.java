/*
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CardRequestDTO;
import org.openapitools.client.model.CardResponseDTO;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CardControllerApi {
    private ApiClient localVarApiClient;

    public CardControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CardControllerApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for createCardUsingPOST
     *
     * @param cardRequestDTO cardRequestDTO (required)
     * @param _callback      Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call createCardUsingPOSTCall(CardRequestDTO cardRequestDTO, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = cardRequestDTO;

        // create path and map variables
        String localVarPath = "/payments/v1/cards/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{};
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCardUsingPOSTValidateBeforeCall(CardRequestDTO cardRequestDTO, final ApiCallback _callback) throws ApiException {

        // verify the required parameter 'cardRequestDTO' is set
        if (cardRequestDTO == null) {
            throw new ApiException("Missing the required parameter 'cardRequestDTO' when calling createCardUsingPOST(Async)");
        }


        okhttp3.Call localVarCall = createCardUsingPOSTCall(cardRequestDTO, _callback);
        return localVarCall;

    }

    /**
     * Create card
     *
     * @param cardRequestDTO cardRequestDTO (required)
     * @return CardResponseDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * </table>
     */
    public CardResponseDTO createCardUsingPOST(CardRequestDTO cardRequestDTO) throws ApiException {
        ApiResponse<CardResponseDTO> localVarResp = createCardUsingPOSTWithHttpInfo(cardRequestDTO);
        return localVarResp.getData();
    }

    /**
     * Create card
     *
     * @param cardRequestDTO cardRequestDTO (required)
     * @return ApiResponse&lt;CardResponseDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<CardResponseDTO> createCardUsingPOSTWithHttpInfo(CardRequestDTO cardRequestDTO) throws ApiException {
        okhttp3.Call localVarCall = createCardUsingPOSTValidateBeforeCall(cardRequestDTO, null);
        Type localVarReturnType = new TypeToken<CardResponseDTO>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create card (asynchronously)
     *
     * @param cardRequestDTO cardRequestDTO (required)
     * @param _callback      The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call createCardUsingPOSTAsync(CardRequestDTO cardRequestDTO, final ApiCallback<CardResponseDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCardUsingPOSTValidateBeforeCall(cardRequestDTO, _callback);
        Type localVarReturnType = new TypeToken<CardResponseDTO>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for deleteCardUsingDELETE
     *
     * @param cardId    cardId (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call deleteCardUsingDELETECall(Long cardId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/payments/v1/cards/{cardId}"
                .replaceAll("\\{" + "cardId" + "\\}", localVarApiClient.escapeString(cardId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{};
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCardUsingDELETEValidateBeforeCall(Long cardId, final ApiCallback _callback) throws ApiException {

        // verify the required parameter 'cardId' is set
        if (cardId == null) {
            throw new ApiException("Missing the required parameter 'cardId' when calling deleteCardUsingDELETE(Async)");
        }


        okhttp3.Call localVarCall = deleteCardUsingDELETECall(cardId, _callback);
        return localVarCall;

    }

    /**
     * Delete card
     *
     * @param cardId cardId (required)
     * @return CardResponseDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     * </table>
     */
    public CardResponseDTO deleteCardUsingDELETE(Long cardId) throws ApiException {
        ApiResponse<CardResponseDTO> localVarResp = deleteCardUsingDELETEWithHttpInfo(cardId);
        return localVarResp.getData();
    }

    /**
     * Delete card
     *
     * @param cardId cardId (required)
     * @return ApiResponse&lt;CardResponseDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<CardResponseDTO> deleteCardUsingDELETEWithHttpInfo(Long cardId) throws ApiException {
        okhttp3.Call localVarCall = deleteCardUsingDELETEValidateBeforeCall(cardId, null);
        Type localVarReturnType = new TypeToken<CardResponseDTO>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete card (asynchronously)
     *
     * @param cardId    cardId (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call deleteCardUsingDELETEAsync(Long cardId, final ApiCallback<CardResponseDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCardUsingDELETEValidateBeforeCall(cardId, _callback);
        Type localVarReturnType = new TypeToken<CardResponseDTO>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for findAllCardsUsingGET
     *
     * @param offset       (optional)
     * @param paged        (optional)
     * @param pageNumber   (optional)
     * @param pageSize     (optional)
     * @param sortSorted   (optional)
     * @param sortUnsorted (optional)
     * @param unpaged      (optional)
     * @param _callback    Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call findAllCardsUsingGETCall(Long offset, Boolean paged, Integer pageNumber, Integer pageSize, Boolean sortSorted, Boolean sortUnsorted, Boolean unpaged, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/payments/v1/cards/page";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (paged != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("paged", paged));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (sortSorted != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort.sorted", sortSorted));
        }

        if (sortUnsorted != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort.unsorted", sortUnsorted));
        }

        if (unpaged != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unpaged", unpaged));
        }

        final String[] localVarAccepts = {
                "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{};
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findAllCardsUsingGETValidateBeforeCall(Long offset, Boolean paged, Integer pageNumber, Integer pageSize, Boolean sortSorted, Boolean sortUnsorted, Boolean unpaged, final ApiCallback _callback) throws ApiException {


        okhttp3.Call localVarCall = findAllCardsUsingGETCall(offset, paged, pageNumber, pageSize, sortSorted, sortUnsorted, unpaged, _callback);
        return localVarCall;

    }

    /**
     * Get all cards by some page and sort
     *
     * @param offset       (optional)
     * @param paged        (optional)
     * @param pageNumber   (optional)
     * @param pageSize     (optional)
     * @param sortSorted   (optional)
     * @param sortUnsorted (optional)
     * @param unpaged      (optional)
     * @return List&lt;CardResponseDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * </table>
     */
    public List<CardResponseDTO> findAllCardsUsingGET(Long offset, Boolean paged, Integer pageNumber, Integer pageSize, Boolean sortSorted, Boolean sortUnsorted, Boolean unpaged) throws ApiException {
        ApiResponse<List<CardResponseDTO>> localVarResp = findAllCardsUsingGETWithHttpInfo(offset, paged, pageNumber, pageSize, sortSorted, sortUnsorted, unpaged);
        return localVarResp.getData();
    }

    /**
     * Get all cards by some page and sort
     *
     * @param offset       (optional)
     * @param paged        (optional)
     * @param pageNumber   (optional)
     * @param pageSize     (optional)
     * @param sortSorted   (optional)
     * @param sortUnsorted (optional)
     * @param unpaged      (optional)
     * @return ApiResponse&lt;List&lt;CardResponseDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<List<CardResponseDTO>> findAllCardsUsingGETWithHttpInfo(Long offset, Boolean paged, Integer pageNumber, Integer pageSize, Boolean sortSorted, Boolean sortUnsorted, Boolean unpaged) throws ApiException {
        okhttp3.Call localVarCall = findAllCardsUsingGETValidateBeforeCall(offset, paged, pageNumber, pageSize, sortSorted, sortUnsorted, unpaged, null);
        Type localVarReturnType = new TypeToken<List<CardResponseDTO>>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all cards by some page and sort (asynchronously)
     *
     * @param offset       (optional)
     * @param paged        (optional)
     * @param pageNumber   (optional)
     * @param pageSize     (optional)
     * @param sortSorted   (optional)
     * @param sortUnsorted (optional)
     * @param unpaged      (optional)
     * @param _callback    The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call findAllCardsUsingGETAsync(Long offset, Boolean paged, Integer pageNumber, Integer pageSize, Boolean sortSorted, Boolean sortUnsorted, Boolean unpaged, final ApiCallback<List<CardResponseDTO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = findAllCardsUsingGETValidateBeforeCall(offset, paged, pageNumber, pageSize, sortSorted, sortUnsorted, unpaged, _callback);
        Type localVarReturnType = new TypeToken<List<CardResponseDTO>>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for getCardUsingGET
     *
     * @param cardId    cardId (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getCardUsingGETCall(Long cardId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/payments/v1/cards/{cardId}"
                .replaceAll("\\{" + "cardId" + "\\}", localVarApiClient.escapeString(cardId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{};
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCardUsingGETValidateBeforeCall(Long cardId, final ApiCallback _callback) throws ApiException {

        // verify the required parameter 'cardId' is set
        if (cardId == null) {
            throw new ApiException("Missing the required parameter 'cardId' when calling getCardUsingGET(Async)");
        }


        okhttp3.Call localVarCall = getCardUsingGETCall(cardId, _callback);
        return localVarCall;

    }

    /**
     * Get card by id
     *
     * @param cardId cardId (required)
     * @return CardResponseDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * </table>
     */
    public CardResponseDTO getCardUsingGET(Long cardId) throws ApiException {
        ApiResponse<CardResponseDTO> localVarResp = getCardUsingGETWithHttpInfo(cardId);
        return localVarResp.getData();
    }

    /**
     * Get card by id
     *
     * @param cardId cardId (required)
     * @return ApiResponse&lt;CardResponseDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<CardResponseDTO> getCardUsingGETWithHttpInfo(Long cardId) throws ApiException {
        okhttp3.Call localVarCall = getCardUsingGETValidateBeforeCall(cardId, null);
        Type localVarReturnType = new TypeToken<CardResponseDTO>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get card by id (asynchronously)
     *
     * @param cardId    cardId (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getCardUsingGETAsync(Long cardId, final ApiCallback<CardResponseDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCardUsingGETValidateBeforeCall(cardId, _callback);
        Type localVarReturnType = new TypeToken<CardResponseDTO>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for getCardsByUserIdUsingGET
     *
     * @param userId    userId (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getCardsByUserIdUsingGETCall(Long userId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/payments/v1/cards/user/{userId}"
                .replaceAll("\\{" + "userId" + "\\}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{};
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCardsByUserIdUsingGETValidateBeforeCall(Long userId, final ApiCallback _callback) throws ApiException {

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getCardsByUserIdUsingGET(Async)");
        }


        okhttp3.Call localVarCall = getCardsByUserIdUsingGETCall(userId, _callback);
        return localVarCall;

    }

    /**
     * Get all cards of some user
     *
     * @param userId userId (required)
     * @return List&lt;CardResponseDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * </table>
     */
    public List<CardResponseDTO> getCardsByUserIdUsingGET(Long userId) throws ApiException {
        ApiResponse<List<CardResponseDTO>> localVarResp = getCardsByUserIdUsingGETWithHttpInfo(userId);
        return localVarResp.getData();
    }

    /**
     * Get all cards of some user
     *
     * @param userId userId (required)
     * @return ApiResponse&lt;List&lt;CardResponseDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<List<CardResponseDTO>> getCardsByUserIdUsingGETWithHttpInfo(Long userId) throws ApiException {
        okhttp3.Call localVarCall = getCardsByUserIdUsingGETValidateBeforeCall(userId, null);
        Type localVarReturnType = new TypeToken<List<CardResponseDTO>>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all cards of some user (asynchronously)
     *
     * @param userId    userId (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call getCardsByUserIdUsingGETAsync(Long userId, final ApiCallback<List<CardResponseDTO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCardsByUserIdUsingGETValidateBeforeCall(userId, _callback);
        Type localVarReturnType = new TypeToken<List<CardResponseDTO>>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for updateCardUsingPUT
     *
     * @param cardId         cardId (required)
     * @param cardRequestDTO cardRequestDTO (required)
     * @param _callback      Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call updateCardUsingPUTCall(Long cardId, CardRequestDTO cardRequestDTO, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = cardRequestDTO;

        // create path and map variables
        String localVarPath = "/payments/v1/cards/{cardId}"
                .replaceAll("\\{" + "cardId" + "\\}", localVarApiClient.escapeString(cardId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[]{};
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCardUsingPUTValidateBeforeCall(Long cardId, CardRequestDTO cardRequestDTO, final ApiCallback _callback) throws ApiException {

        // verify the required parameter 'cardId' is set
        if (cardId == null) {
            throw new ApiException("Missing the required parameter 'cardId' when calling updateCardUsingPUT(Async)");
        }

        // verify the required parameter 'cardRequestDTO' is set
        if (cardRequestDTO == null) {
            throw new ApiException("Missing the required parameter 'cardRequestDTO' when calling updateCardUsingPUT(Async)");
        }


        okhttp3.Call localVarCall = updateCardUsingPUTCall(cardId, cardRequestDTO, _callback);
        return localVarCall;

    }

    /**
     * Update card
     *
     * @param cardId         cardId (required)
     * @param cardRequestDTO cardRequestDTO (required)
     * @return CardResponseDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * </table>
     */
    public CardResponseDTO updateCardUsingPUT(Long cardId, CardRequestDTO cardRequestDTO) throws ApiException {
        ApiResponse<CardResponseDTO> localVarResp = updateCardUsingPUTWithHttpInfo(cardId, cardRequestDTO);
        return localVarResp.getData();
    }

    /**
     * Update card
     *
     * @param cardId         cardId (required)
     * @param cardRequestDTO cardRequestDTO (required)
     * @return ApiResponse&lt;CardResponseDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<CardResponseDTO> updateCardUsingPUTWithHttpInfo(Long cardId, CardRequestDTO cardRequestDTO) throws ApiException {
        okhttp3.Call localVarCall = updateCardUsingPUTValidateBeforeCall(cardId, cardRequestDTO, null);
        Type localVarReturnType = new TypeToken<CardResponseDTO>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update card (asynchronously)
     *
     * @param cardId         cardId (required)
     * @param cardRequestDTO cardRequestDTO (required)
     * @param _callback      The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
     * <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call updateCardUsingPUTAsync(Long cardId, CardRequestDTO cardRequestDTO, final ApiCallback<CardResponseDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCardUsingPUTValidateBeforeCall(cardId, cardRequestDTO, _callback);
        Type localVarReturnType = new TypeToken<CardResponseDTO>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
