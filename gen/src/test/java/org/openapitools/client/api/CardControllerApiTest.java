/*
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CardRequestDTO;
import org.openapitools.client.model.CardResponseDTO;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CardControllerApi
 */
@Ignore
public class CardControllerApiTest {

    private final CardControllerApi api = new CardControllerApi();


    /**
     * Create card
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createCardUsingPOSTTest() throws ApiException {
        CardRequestDTO cardRequestDTO = null;
        CardResponseDTO response = api.createCardUsingPOST(cardRequestDTO);

        // TODO: test validations
    }

    /**
     * Delete card
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteCardUsingDELETETest() throws ApiException {
        Long cardId = null;
        CardResponseDTO response = api.deleteCardUsingDELETE(cardId);

        // TODO: test validations
    }

    /**
     * Get all cards by some page and sort
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findAllCardsUsingGETTest() throws ApiException {
        Long offset = null;
        Boolean paged = null;
        Integer pageNumber = null;
        Integer pageSize = null;
        Boolean sortSorted = null;
        Boolean sortUnsorted = null;
        Boolean unpaged = null;
        List<CardResponseDTO> response = api.findAllCardsUsingGET(offset, paged, pageNumber, pageSize, sortSorted, sortUnsorted, unpaged);

        // TODO: test validations
    }

    /**
     * Get card by id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCardUsingGETTest() throws ApiException {
        Long cardId = null;
        CardResponseDTO response = api.getCardUsingGET(cardId);

        // TODO: test validations
    }

    /**
     * Get all cards of some user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCardsByUserIdUsingGETTest() throws ApiException {
        Long userId = null;
        List<CardResponseDTO> response = api.getCardsByUserIdUsingGET(userId);

        // TODO: test validations
    }

    /**
     * Update card
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateCardUsingPUTTest() throws ApiException {
        Long cardId = null;
        CardRequestDTO cardRequestDTO = null;
        CardResponseDTO response = api.updateCardUsingPUT(cardId, cardRequestDTO);

        // TODO: test validations
    }

}
